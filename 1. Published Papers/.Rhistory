7	20
"
hw9.q4 = read.table(text = hw9.q4, header = T)
sum((hw9.q4$Colonies*hw9.q4$Observation))/sum(hw9.q4$Observation)
Mean = weighted.mean(hw9.q4$Colonies, w = hw9.q4$Observation)
Proportion = round(exp(-Mean)*(Mean^hw9.q4$Colonies)/factorial(hw9.q4$Colonies), 2)
Proportion
sum(Proportion)
sum(Proportion[-1])
Proportion
Proportion[-1]
Proportion[-7]
Proportion[-8]
sum(Proportion[-8])
Proportion = round(exp(-Mean)*(Mean^hw9.q4$Colonies)/factorial(hw9.q4$Colonies), 2)
Proportion
sum(Proportion)
rm(list = ls())
data = "
24 35 5 64
11 10 8 29
"
chisq.test(x = as.matrix(read.table(text = data)))
install.packages(cleanRfields)
install.packages("cleanRfields")
install.packages("cleanRfields", binary = T)
install.packages("devtools")
devtools::install_github("filipematias23/cleanRfield")
library(cleanRFields)
library(cleanRfield)
devtools::install_github("filipematias23/cleanRfield")
install.packages("rgdal")
devtools::install_github("filipematias23/cleanRfield")
devtools::install_github("filipematias23/cleanRfield")
install.packages("tensorflow")
library(tenserflow)
library(tensorflow)
help("tensorflow")
install.packages(frbs)
install.packages("frbs")
library(frbs)
args(grbs)
args(frbs)
remove.packages("frbs")
install.packages("frbs")
install.packages("frbs")
library(frbs)
install.packages(ggstatsplot)
install.packages("ggstatsplot")
install.packages("see")
help(see)
library(see)
install.packages("easystats")
install.packages("parameters")
install.packages(bayestestR)
install.packages("bayestestR")
install.packages("rstanarm")
install.packages("modelbased")
nstall.packages("timeDate")
install.packages("timeSeries")
install.packages("fBasics")
library(timeDate)
library(timeSeries)
library(fBasics)
install.packages("timeDate")
nstall.packages("timeDate")
install.packages("timeSeries")
install.packages("fBasics")
library(timeDate)
library(timeSeries)
library(fBasics)
install.packages("timeDate")
install.packages("timeDate")
linepoints = c(0, 0.0874, 0.600, -1.459)
line(linepoints)
plot(line(linepoints))
lines(linepoints)
plot(lines(linepoints))
scale(linepoints)
scale(linepoints)[,1]
plot(scale(linepoints)[,1])
plot(scale(linepoints)[,1], y = (0, 0, 0, 0))
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0))
plot(y = scale(linepoints)[,1], x = c(0, 0, 0, 0))
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0))
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0))
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = "*")
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = linepoints)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = linepoints,
col = 2)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 3,
col = 2)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2)
names = c("Sanctuary", "Canopy", "Deer", "Lease")
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
labels(names)
col = 2)
names = c("Sanctuary", "Canopy", "Deer", "Lease")
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
labels(names),
col = 2)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2)
help(plot)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2,
frame.plot = F)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2,
frame.plot = F,
cex = linepoints)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2,
frame.plot = F,
cex = 3)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
col = 2,
frame.plot = F,
cex = 1)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
ylim = c(0, 0),
col = 2,
frame.plot = F,
cex = 1,
)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
ylim = c(0:0),
col = 2,
frame.plot = F,
cex = 1,
)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
ylim = c(-0.1,0.1),
col = 2,
frame.plot = F,
cex = 1,
)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
ylim = c(-0,0),
col = 2,
frame.plot = F,
cex = 1,
)
plot(x = scale(linepoints)[,1], y = c(0, 0, 0, 0),
pch = 1,
ylim = c(0, 0),
col = 2,
frame.plot = F,
cex = 1,
)
gc()
20/12
install.packages("DiagrammeR")
library(DiagrammeR)
help("DiagrammeR")
library(DiagrammeR)
DiagrammeR("
graph LR
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
DiagrammeR("
graph TB
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
DiagrammeR("graph LR;A(Rounded)-->B[Squared];B-->C{A Decision};
C-->D[Square One];C-->E[Square Two];
style A fill:#E5E25F;  style B fill:#87AB51; style C fill:#3C8937;
style D fill:#23772C;  style E fill:#B6E6E6;"
)
DiagrammeR("graph LR;A(Rounded)-->B[Squared];B-->C{A Decision};
C-->D[Square One];C-->E[Square Two]"
)
DiagrammeR("graph LR;A(Rounded)-->B[Squared];B-->C{A Decision};
C-->D[Square One];C-->E[Square Two])
DiagrammeR("graph LR; A(Rounded)-->B[Squared]; B-->C{A Decision}; C-->D[Square One];C-->E[Square Two];)
DiagrammeR("graph LR; A(Rounded)-->B[Squared]; B-->C{A Decision}; C-->D[Square One];C-->E[Square Two]; style A fill:#E5E25F;  style B fill:#87AB51; style C fill:#3C8937; style D fill:#23772C;  style E fill:#B6E6E6;")
DiagrammeR("graph LR; A(Rounded)-->B[Squared]; B-->C{A Decision}; C-->D[Square One];C-->E[Square Two]; style A fill:#E5E25F;  style B fill:#87AB52; style C fill:#3C8937; style D fill:#23772C;  style E fill:#B6E6E6;")
# Load in the 'mtcars' dataset
data(mtcars)
connections <- sapply(
1:ncol(mtcars)
,function(i) {
paste0(
i
,"(",colnames(mtcars)[i],")---"
,i,"-stats("
,paste0(
names(summary(mtcars[,i]))
,": "
,unname(summary(mtcars[,i]))
,collapse="<br/>"
)
,")"
)
}
)
DiagrammeR(
paste0(
"graph TD;", "\n",
paste(connections, collapse = "\n"),"\n",
"classDef column fill:#0001CC, stroke:#0D3FF3, stroke-width:1px;" ,"\n",
"class ", paste0(1:length(connections), collapse = ","), " column;"
)
)
#install.packages("DiagrammeR")
library(DiagrammeR)
## Not run:
# note the whitespace is not important
DiagrammeR("
graph LR
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
DiagrammeR("
graph TB
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
DiagrammeR("graph LR; A(Rounded)-->B[Squared]; B-->C{A Decision}; C-->D[Square One];C-->E[Square Two]; style A fill:#E5E25F;  style B fill:#87AB52; style C fill:#3C8937; style D fill:#23772C;  style E fill:#B6E6E6;")
# Load in the 'mtcars' dataset
data(mtcars)
connections <- sapply(
1:ncol(mtcars)
,function(i) {
paste0(
i
,"(",colnames(mtcars)[i],")---"
,i,"-stats("
,paste0(
names(summary(mtcars[,i]))
,": "
,unname(summary(mtcars[,i]))
,collapse="<br/>"
)
,")"
)
}
)
DiagrammeR(
paste0(
"graph TD;", "\n",
paste(connections, collapse = "\n"),"\n",
"classDef column fill:#0001CC, stroke:#0D3FF3, stroke-width:1px;" ,"\n",
"class ", paste0(1:length(connections), collapse = ","), " column;"
)
)
# also with DiagrammeR() you can use tags from htmltools
# just make sure to use class = "mermaid"
library(htmltools)
diagramSpec = "
graph LR;
id1(Start)-->id2(Stop);
style id1 fill:#f9f,stroke:#333,stroke-width:4px;
style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5;
"
html_print(tagList(
tags$h1("R + mermaid.js = Something Special")
,tags$pre(diagramSpec)
,tags$div(class="mermaid",diagramSpec)
,DiagrammeR()
))
# sequence diagrams
# Using this "How to Draw a Sequence Diagram"
#   http://www.cs.uku.fi/research/publications/reports/A-2003-1/page91.pdf
# draw some sequence diagrams with DiagrammeR
library(DiagrammeR)
DiagrammeR("
sequenceDiagram;
customer->>ticket seller: ask for ticket;
ticket seller->>database: seats;
alt tickets available
database->>ticket seller: ok;
ticket seller->>customer: confirm;
customer->>ticket seller: ok;
ticket seller->>database: book a seat;
ticket seller->>printer: print ticket;
else sold out
database->>ticket seller: none left;
ticket seller->>customer:  sorry;
end
")
library(grid)
library(Gmisc)
grid.newpage()
# set some parameters to use repeatedly
leftx <- .25
midx <- .5
rightx <- .75
width <- .4
gp <- gpar(fill = "lightgrey")
# create boxes
(total <- boxGrob("Total\n N = NNN",
x=midx, y=.9, box_gp = gp, width = width))
(rando <- boxGrob("Randomized\n N = NNN",
x=midx, y=.75, box_gp = gp, width = width))
# connect boxes like this
connectGrob(total, rando, "v")
(inel <- boxGrob("Ineligible\n N = NNN",
x=rightx, y=.825, box_gp = gp, width = .25, height = .05))
connectGrob(total, inel, "-")
(g1 <- boxGrob("Allocated to Group 1\n N = NNN",
x=leftx, y=.5, box_gp = gp, width = width))
(g2 <- boxGrob("Allocated to Group 2\n N = NNN",
x=rightx, y=.5, box_gp = gp, width = width))
connectGrob(rando, g1, "N")
connectGrob(rando, g2, "N")
(g11 <- boxGrob("Followed up\n N = NNN",
x=leftx, y=.3, box_gp = gp, width = width))
(g21 <- boxGrob("Followed up\n N = NNN",
x=rightx, y=.3, box_gp = gp, width = width))
connectGrob(g1, g11, "N")
connectGrob(g2, g21, "N")
(g12 <- boxGrob("Completed\n N = NNN",
x=leftx, y=.1, box_gp = gp, width = width))
(g22 <- boxGrob("Completed\n N = NNN",
x=rightx, y=.1, box_gp = gp, width = width))
connectGrob(g11, g12, "N")
connectGrob(g21, g22, "N")
install.packages(grid)
install.packages(grid)
install.packages("grid")
install.packages("grid")
install.packages("Gmisc")
library(grid)
library(Gmisc)
grid.newpage()
# set some parameters to use repeatedly
leftx <- .25
midx <- .5
rightx <- .75
width <- .4
gp <- gpar(fill = "lightgrey")
# create boxes
(total <- boxGrob("Total\n N = NNN",
x=midx, y=.9, box_gp = gp, width = width))
(rando <- boxGrob("Randomized\n N = NNN",
x=midx, y=.75, box_gp = gp, width = width))
# connect boxes like this
connectGrob(total, rando, "v")
(inel <- boxGrob("Ineligible\n N = NNN",
x=rightx, y=.825, box_gp = gp, width = .25, height = .05))
connectGrob(total, inel, "-")
(g1 <- boxGrob("Allocated to Group 1\n N = NNN",
x=leftx, y=.5, box_gp = gp, width = width))
(g2 <- boxGrob("Allocated to Group 2\n N = NNN",
x=rightx, y=.5, box_gp = gp, width = width))
connectGrob(rando, g1, "N")
connectGrob(rando, g2, "N")
(g11 <- boxGrob("Followed up\n N = NNN",
x=leftx, y=.3, box_gp = gp, width = width))
(g21 <- boxGrob("Followed up\n N = NNN",
x=rightx, y=.3, box_gp = gp, width = width))
connectGrob(g1, g11, "N")
connectGrob(g2, g21, "N")
(g12 <- boxGrob("Completed\n N = NNN",
x=leftx, y=.1, box_gp = gp, width = width))
(g22 <- boxGrob("Completed\n N = NNN",
x=rightx, y=.1, box_gp = gp, width = width))
connectGrob(g11, g12, "N")
connectGrob(g21, g22, "N")
inel <- boxGrob("Ineligible\n N = NNN",
x=rightx, y=.825, box_gp = gp, width = .25, height = .05)
grid.newpage()
leftx <- .25
midx <- .5
rightx <- .75
width <- .4
gp <- gpar(fill = "lightgrey")
# create boxes
(total <- boxGrob("Total\n N = NNN",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("ABC",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("ABC",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me",
x=midx, y=.9, box_gp = gp, width = width))
(rando <- boxGrob("Randomized\n N = NNN",
x=midx, y=.75, box_gp = gp, width = width))
(total <- boxGrob("This is me\n ABC",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me\ ABC",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me\n ABC",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me and I am living in my place,
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me and I am living in my place",
x=midx, y=.9, box_gp = gp, width = width))
gp <- gpar(fill = "lightgrey")
# create boxes
(total <- boxGrob("This is me and I am living in my place",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me \m I am living in my place",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me \n I am living in my place",
x=midx, y=.9, box_gp = gp, width = width))
(total <- boxGrob("This is me. \n I am living in my place.",
x=midx, y=.9, box_gp = gp, width = width))
args(boxGrob)
help()
library(DiagrammeR)
library(Gmisc, quietly = TRUE)
library(glue)
library(htmlTable)
library(grid)
library(magrittr)
## Not run:
install.packages("languageserver")
knitr::opts_chunk$set(echo = TRUE)
midwest <- read.csv("http://goo.gl/G1K41K")  # back up data source
write.csv(midwest.csv)
setwd("/Users/bmishra/Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/R CODES/ggplot2")
options(scipen = 999)
library(ggplot2)
midwest <- read.csv("http://goo.gl/G1K41K")  # back up data source
write.csv(midwest.csv, midwest)
midwest <- read.csv("http://goo.gl/G1K41K")  # back up data source
midwest
help("write.csv")
midwest = read.csv("http://goo.gl/G1K41K")  # back up data source
write.csv(x = midwest, file = "midwest.csv")
library(shinytest)
library(shinythemes)
library(shiny)
library(shinytest)
library(shinythemes)
library(shinyjs)
library(shiny)
library(shinytest)
library(shinythemes)
library(shinyjs)
shinytest::recordTest("~/Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App")
shinytest::recordTest("~/Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App")
install.packages('rsconnect')
install.packages("rsconnect")
library(shiny); runApp('Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App/Shiny Tutorial.R')
help("shiny")
library(shiny)
# library(shinytest)
# library(shinythemes)
# library(shinyjs)
# rsconnect::setAccountInfo(name = 'biju9bjs',
#                           token = 'B59E30E4AD90BDDF709176F813529DC8',
#                           secret = 'c4yT7kWemMHMsresRpVDxVhHEDOVvxkAHCLQY6NL')
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a Number",
value = 25,
min = 1,
max = 100),
textInput(inputId = " ",
width = NULL,
placeholder = NULL)
plotOutput("hist")
)
server = function(input, output) {
output$hist = renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp('Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App/Shiny Tutorial.R')
runApp('Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App/Shiny Tutorial.R')
runApp('Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App/Shiny Tutorial.R')
runApp('Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/R/Shiny App/Shiny Tutorial.R')
# install.packages("qpdf")
rm(list = ls())
library(qpdf)
setwd("/Users/bmishra/Library/CloudStorage/OneDrive-OklahomaAandMSystem/Publications/Mishra et al/Published Papers")
pdf_subset(input = "Mishra, 2017. MS Thesis.pdf",
pages = c(-1, -2, -4, -5, -6, -10, -11, -12, -14:-20, -141:-144),
output = "Thesis Without Extra Pages.pdf")
